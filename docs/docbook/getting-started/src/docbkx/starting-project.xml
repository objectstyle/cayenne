<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements. See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to you under the Apache License, Version
    2.0 (the "License"); you may not use this file except in compliance
    with the License. You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0 Unless required by
    applicable law or agreed to in writing, software distributed under the
    License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
    CONDITIONS OF ANY KIND, either express or implied. See the License for
    the specific language governing permissions and limitations under the
    License.
-->
<section xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
    <title>Starting a project</title>
    <para>
        The goal of this chapter is to create a new Java project in IntelliJ IDEA
        containing a basic Cayenne mapping. It presents an introduction to 
        CayenneModeler GUI tool, showing how to create the initial mapping 
        objects: <code>DataDomain</code>, <code>DataNode</code>, <code>DataMap</code>.
    </para>
    <section xml:id="create-new-project">
        <title>Create a new Project in IntelliJ IDEA</title>
        <para>
            In IntelliJ IDEA select "<guimenu>File</guimenu> > <guimenuitem>New</guimenuitem> > <guimenuitem>Project...</guimenuitem>" and then
            select "Maven" and click "Next".
            In the dialog shown on the screenshot below, fill the "Group Id"
            and "Artifact Id" fields and click "Next".
        </para>
        <para>
            <inlinemediaobject>
                <imageobject>
                    <imagedata fileref="images/tutorial-idea-project.png" scalefit="1" width="100%"/>
                </imageobject>
            </inlinemediaobject>
        </para>
        <para>
            On next dialog screen you can customize directory for your project and click "Finish".
            Now you should have a new empty project.
        </para>
    </section>
    <section xml:id="download-and-start-cayenne-modeler">
        <title>Download and Start CayenneModeler</title>
        <para>
            Although later in this tutorial we'll be using Maven to include Cayenne 
            runtime jars in the project, you'll still need to download Cayenne to 
            get access to the CayenneModeler tool. 
        </para>
        <para>
            <note>
                <para>If you are really into Maven, you can start
                CayenneModeler from Maven too. We'll do it in a more traditional way
                here.</para>
            </note>
        </para>
        <para>Download the <link xlink:href="http://cayenne.apache.org/download.html">latest release</link>. Unpack the distribution somewhere in the file system and
            start CayenneModeler, following platform-specific instructions. On most platforms it is
            done simply by doubleclicking the Modeler icon. The welcome screen of the Modeler looks
            like this:
        </para>
        <para>
            <inlinemediaobject>
                <imageobject>
                    <imagedata fileref="images/modeler-started.png" scalefit="1" width="100%"/>
                </imageobject>
            </inlinemediaobject>
        </para>
    </section>
    <section xml:id="create-new-mapping-project">
        <title>Create a New Mapping Project in CayenneModeler</title>
        <para>Click on the "New Project" button on Welcome screen. A new mapping project will appear
            that contains a single <emphasis role="bold">DataDomain</emphasis>. The meaning of a
            DataDomain is explained elsewhere in the User Guide. For now it is sufficient to
            understand that DataDomain is the root of your mapping project.
        </para>
    </section>
    <section xml:id="create-datanode">
        <title>Create a DataNode</title>
        <para>The next project object you will create is a <emphasis role="bold"
            >DataNode</emphasis>. DataNode is a descriptor of a single database your application
            will connect to. Cayenne mapping project can use more than one database, but for now,
            we'll only use one. With "project" selected on the left, click on "Create DataNode"
            button <inlinemediaobject>
                <imageobject>
                    <imagedata fileref="images/icon-node.png"/>
                </imageobject>
            </inlinemediaobject> on the toolbar (or select "Project &gt; Create DataNode" from the menu.
        </para>
        <para>A new DataNode is displayed. Now you need to specify JDBC connection parameters. For
            an in-memory Derby database you can enter the following settings: <itemizedlist>
                <listitem>
                    <para>JDBC Driver: org.apache.derby.jdbc.EmbeddedDriver</para>
                </listitem>
                <listitem>
                    <para>DB URL: jdbc:derby:memory:testdb;create=true</para>
                </listitem>
            </itemizedlist></para>
        <para>
            <note><para>We are creating an in-memory database here. So when
                you stop your application, all the data will be lost. In most real-life
                cases you'll be connecting to a database that actually persists its data on
                disk, but an in-memory DB will do for the simple tutorial.</para>
            </note>
        </para>
        <para>Also you will need to change "Schema Update Strategy". Select
            "<code>org.apache.cayenne.access.dbsync.CreateIfNoSchemaStrategy</code>" from the dropdown, so that
            Cayenne creates a new schema on Derby based on the ORM mapping when the application
            starts.</para>
        <para>
            <inlinemediaobject>
                <imageobject>
                    <imagedata fileref="images/base-datanode.png" scalefit="1" width="100%"/>
                </imageobject>
            </inlinemediaobject>
        </para>
    </section>
    <section xml:id="create-datamap">
        <title>Create a DataMap</title>
        <para>Now you will create a <emphasis role="bold">DataMap</emphasis>. DataMap is an object
            that holds all the mapping information. To create it, click on "Create DataMap" button
            <inlinemediaobject>
                <imageobject>
                    <imagedata fileref="images/icon-datamap.png"/>
                </imageobject>
            </inlinemediaobject>
            (or select a corresponding menu item). Note that the newly created DataMap is
            automatically linked to the DataNode that you created in the previous step. If there is
            more than one DataNode, you may need to link a DataMap to the correct node manually. In
            other words a DataMap within DataDomain must point to a database described by the
            map.
        </para>
        <para>You can leave all the DataMap defaults unchanged except for one - "Java Package".
            Enter "<code>org.example.cayenne.persistent</code>". This name will later be used for all persistent
            classes.
        </para>
        <para>
            <inlinemediaobject>
                <imageobject>
                    <imagedata fileref="images/base-datamap.png" scalefit="1" width="100%"/>
                </imageobject>
            </inlinemediaobject>
        </para>
    </section>
    <section xml:id="save-project">
        <title>Save the Project</title>
        <para>Before you proceed with the actual mapping, let's save the project. Click on "Save"
            button in the toolbar and navigate to the "<code>tutorial</code>" IDEA project folder that was
            created earlier in this section and its "<code>src/main/resources</code>" subfolder and save the
            project there. Now go back to IDEA and you will see two Cayenne XML files.</para>
        <para><inlinemediaobject>
                <imageobject>
                    <imagedata fileref="images/idea-xmlfiles.png"/>
                </imageobject>
            </inlinemediaobject></para>
        <para>Note that the location of the XML files is not coincidental. Cayenne runtime looks for
            "<code>cayenne-*.xml</code>" file in the application <code>CLASSPATH</code> and "<code>src/main/resources</code>" folder should
            already be a "class folder" in IDEA for our project (and is also a standard location
            that Maven would copy to a jar file, if we were using Maven from command-line).</para>
    </section>
</section>
