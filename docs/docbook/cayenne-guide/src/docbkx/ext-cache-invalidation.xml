<?xml version="1.0" encoding="UTF-8"?>
<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ~   Licensed to the Apache Software Foundation (ASF) under one
  ~  or more contributor license agreements.  See the NOTICE file
  ~  distributed with this work for additional information
  ~  regarding copyright ownership.  The ASF licenses this file
  ~  to you under the Apache License, Version 2.0 (the
  ~  "License"); you may not use this file except in compliance
  ~  with the License.  You may obtain a copy of the License at
  ~
  ~    http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~  Unless required by applicable law or agreed to in writing,
  ~  software distributed under the License is distributed on an
  ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~  KIND, either express or implied.  See the License for the
  ~  specific language governing permissions and limitations
  ~  under the License.
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         version="5.0" xml:id="ext-cache-invalidation">
    <title>Cache invalidation extension</title>
    <section>
        <title>Description</title>
        <para>Cache invalidation module is an extension that allows to define cache invalidation policy programmatically.</para>
    </section>
    <section>
        <title>Including in a project</title>
        <section>
            <title>Maven</title>
            <para>
                <programlisting language="xml">&lt;dependency>
    &lt;groupId>org.apache.cayenne&lt;/groupId>
    &lt;artifactId>cayenne-cache-invalidation&lt;/artifactId>
    &lt;version><?eval ${project.version}?>&lt;/version>
&lt;/dependency></programlisting>
            </para>
        </section>
        <section>
            <title>Gradle</title>
            <para>
                <programlisting language="groovy">compile 'org.apache.cayenne:cayenne-cache-invalidation:<?eval ${project.version}?>'</programlisting>
            </para>
        </section>
    </section>
    <section>
        <title>Usage</title>
        <para>
            Module supports autoloading mechanism, so no other actions required to enable it.
            Just mark your entities with <code>@CacheGroups</code> annotation and you are ready to use it:
            <programlisting language="java"><![CDATA[
@CacheGroups("some-group")
public class MyEntity extends _MyEntity {
    // ...
}]]></programlisting>
            After any modification of <code>MyEntity</code> objects cache group <code>"some-group"</code>
            will be dropped from cache automatically.
            <note>
                <para>You can read more about cache and cache groups in corresponding <link linkend="caching-and-fresh-data">chapter</link> of this documentation.</para>
            </note>
        </para>
        <para>
            In case you need some complex logic of cache invalidation you can disable default behaviour and provide your own.
        </para>
        <para>
            To do so you need to implement <code>org.apache.cayenne.cache.invalidation.InvalidationHandler</code> interface and setup Cache Invalidation module to
            use it.
            Let's use implementation class called <code>CustomInvalidationHandler</code> that will simply match
            all entities' types with <code>"custom-group"</code> cache group regardless of any annotations:
            <programlisting language="java"><![CDATA[
public class CustomInvalidationHandler implements InvalidationHandler {
    @Override
    public InvalidationFunction canHandle(Class<? extends Persistent> type) {
        return p -> Collections.singleton(new CacheGroupDescriptor("custom-group"));
    }
}]]></programlisting>
            Now we'll set up it's usage by <code>ServerRuntime</code>:
            <programlisting language="java"><![CDATA[
ServerRuntime.builder()
        .addModule(CacheInvalidationModule.extend()
                // this will disable default handler based on @CacheGroups, and this is optional
                .noCacheGroupsHandler()
                .addHandler(CustomInvalidationHandler.class)
                .module())
]]></programlisting>
            <note>
                <para>You can combine as many invalidation handlers as you need.</para>
            </note>
        </para>
    </section>
</chapter>
