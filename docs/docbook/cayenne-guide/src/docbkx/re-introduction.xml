<?xml version="1.0" encoding="UTF-8"?>
<!--
	Licensed to the Apache Software Foundation (ASF) under one or more
	contributor license agreements. See the NOTICE file distributed with
	this work for additional information regarding copyright ownership.
	The ASF licenses this file to you under the Apache License, Version
	2.0 (the "License"); you may not use this file except in compliance
	with the License. You may obtain a copy of the License at
	
	http://www.apache.org/licenses/LICENSE-2.0 Unless required by
	applicable law or agreed to in writing, software distributed under the
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
	CONDITIONS OF ANY KIND, either express or implied. See the License for
	the specific language governing permissions and limitations under the
	License.
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.0" xml:id="re-introduction">
    <title>Introduction</title>
    <section xml:id="what-is-cdbimport">
    	<title>"DB-first" Flow</title>
    	<para>An ORM system consists of three parts: database, OR mapping and persistent Java classes.
			These parts always need to be kept in sync with each other for the application to work.
			"DB-first" flow is a common and practical approach to synchronization that assumes the
			database to be the master source of the metadata, with other two parts synchronized from
			the DB as the schema evolves. Cayenne provides a number of tools to automate and control
			it. Here is how "DB-first" flow is typically implemented:<itemizedlist>
				<listitem>
					<para> A SQL migrations framework is used to bring a local DB to a certain
						version. This is outside of the scope of Cayenne and is done with a
						third-party tool, such as Liquibase or Flyway.</para>
				</listitem>
				<listitem>
					<para>OR mapping model (Cayenne XML files) are synchronized with the state of the database
						using <code>"cdbimport"</code> tool provdied by Cayenne.</para>
				</listitem>
				<listitem>
					<para>Object layer of the OR mapping model is customized to the developer liking, usually via
						CayenneModeler. Subsequent runs of <code>"cdbimport"</code> will not
						override any customizations that you make.</para>
				</listitem>
				<listitem>
					<para>Java classes are generated using <code>"cgen"</code> tool provided by Cayenne.</para>
				</listitem>
			</itemizedlist></para>
		<para>"cgen" and "cdbimport" tools can be invoked from Maven or Ant as discussed in the
			"Including Cayenne in a Project" chapter or run from CayenneModeler. This chapter will
			mostly focus on "cdbimport". </para>
		<para>
			Here is simple maven configuration to start with:
			
			
		</para>
    </section>
	<section xml:id="re-configuration-file">
		<title>Introduction to "cdbimport"</title>
		<para>Here is a simple Maven configuration of "cdbimport" (for details see <link linkend="mvn-cdbimport">cayenne-maven-plugin</link> documentation)</para>
		<para>
			<programlisting language="xml">
	&lt;plugin&gt;
		&lt;groupId&gt;org.apache.cayenne.plugins&lt;/groupId&gt;
		&lt;artifactId&gt;cayenne-maven-plugin&lt;/artifactId&gt;
		&lt;version&gt;<?eval ${project.version}?>&lt;/version&gt;

		&lt;configuration&gt;
			&lt;map>${project.basedir}/src/main/resources/datamap.map.xml&lt;/map>
			&lt;dataSource>
				&lt;url>&lt;!-- jdbc url -->&lt;/url&gt;
				&lt;driver>&lt;!-- jdbc driver class --&gt;&lt;/driver&gt;
				&lt;username>username&lt;/username>
				&lt;password&gt;password&lt;/password&gt;
			&lt;/dataSource>
			&lt;dbimport&gt;
				&lt;defaultPackage&gt;com.example.package&lt;/defaultPackage&gt;
			    &lt;includeTable>.*&lt;/includeTable>
			&lt;/dbimport&gt;
		&lt;/configuration&gt;
		&lt;dependencies&gt;
			&lt;!-- jdbc driver dependency --&gt;
		&lt;/dependencies&gt;
	&lt;/plugin&gt;
			</programlisting>
		</para>

		<para>In the next chapters we will discuss various filtering and other reverse-engineering
			options.</para>
	</section>
</chapter>
