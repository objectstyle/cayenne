<?xml version="1.0" encoding="UTF-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements. See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to you under the Apache License, Version
    2.0 (the "License"); you may not use this file except in compliance
    with the License. You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0 Unless required by
    applicable law or agreed to in writing, software distributed under the
    License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
    CONDITIONS OF ANY KIND, either express or implied. See the License for
    the specific language governing permissions and limitations under the
    License.
-->
<section xmlns="http://docbook.org/ns/docbook" xml:id="ejbqlquery">
        <title>EJBQLQuery</title>
        <para>EJBQLQuery was created as a part of an experiment in adopting some of Java Persistence
            API (JPA) approaches in Cayenne. It is a parameterized object query that is created from
            query String. A String used to build EJBQLQuery must conform to JPQL (JPA query
            language):<programlisting language="java">EJBQLQuery query = new EJBQLQuery("select a FROM Artist a");</programlisting></para>
        <para>JPQL details can be found in any JPA manual. Here we'll mention only how this fits
            into Cayenne and what are the differences between EJBQL and other Cayenne
            queries.</para>
        <para>Although most frequently EJBQLQuery is used as an alternative to SelectQuery, there
            are also DELETE and UPDATE varieties available. <note>
                <para>As of this version of Cayenne, DELETE and UPDATE do not change the state of
                    objects in the ObjectContext. They are run directly against the database
                    instead.Â </para>
            </note><programlisting language="java">EJBQLQuery select = new EJBQLQuery("select a FROM Artist a WHERE a.name = 'Salvador Dali'");
List&lt;Artist> artists = context.performQuery(select);</programlisting><programlisting language="java">EJBQLQuery delete = new EJBQLQuery("delete from Painting");
context.performGenericQuery(delete);</programlisting><programlisting language="java">EJBQLQuery update = new EJBQLQuery("UPDATE Painting AS p SET p.name = 'P2' WHERE p.name = 'P1'");
context.performGenericQuery(update);</programlisting>In
            most cases SelectQuery is preferred to EJBQLQuery, as it is API-based, and provides you
            with better compile-time checks. However sometimes you may want a completely scriptable
            object query. This is when you might prefer EJBQL. A more practical reason for picking
            EJBQL over SelectQuery though is that the former offers some extra selecting
            capabilities, namely aggregate functions and
            subqueries:<programlisting language="java">EJBQLQuery query = new EJBQLQuery("select a, COUNT(p) FROM Artist a JOIN a.paintings p GROUP BY a");
List&lt;Object[]> result = context.performQuery(query);
for(Object[] artistWithCount : result) {
    Artist a = (Artist) artistWithCount[0];
    int hasPaintings = (Integer) artistWithCount[1];
}</programlisting>This
            also demonstrates a previously unseen type of select result - a List of Object[]
            elements, where each entry in an Object[] is either a DataObject or a scalar, depending
            on the query SELECT clause. A result can also be a list of
            scalars:<programlisting language="java">EJBQLQuery query = new EJBQLQuery("select a.name FROM Artist a");
List&lt;String> names = context.performQuery(query);</programlisting>

            EJBQLQuery supports an "IN" clause with three different usage-patterns.  The following
            example would require three individual positional parameters (named
            parameters could also have been used) to be supplied.

            <programlisting language="sql">select p from Painting p where p.paintingTitle in (?1,?2,?3)</programlisting>

            The following example requires a single positional parameter to be supplied.  The
            parameter can be any concrete implementation of the java.util.Collection interface such as
            java.util.List or java.util.Set.

            <programlisting language="sql">select p from Painting p where p.paintingTitle in ?1</programlisting>

            The following example is functionally identical to the one prior.

            <programlisting language="sql">select p from Painting p where p.paintingTitle in (?1)</programlisting>

            </para>
            <para>
                It is <link linkend="expressions-to-ejbql">possible to convert</link>
                an <link linkend="expressions">Expression</link>
                object used with a <link linkend="selectquery">SelectQuery</link>
                to EJBQL.  Use the Expression#appendAsEJBQL methods for this purpose.
            </para>
            <para>
            While
            Cayenne Expressions discussed previously can be thought of as identical to JPQL WHERE
            clause, and indeed they are very close, there are a few noteable differences:
            <itemizedlist>
                <listitem>
                    <para>Null handling: SelectQuery would translate the expressions matching NULL
                        values to the corresponding "X IS NULL" or "X IS NOT NULL" SQL syntax.
                        EJBQLQuery on the other hand requires explicit "IS NULL" (or "IS NOT NULL")
                        syntax to be used, otherwise the generated SQL will look like "X = NULL" (or
                        "X &lt;> NULL"), which will evaluate differently.</para>
                </listitem>
                <listitem>
                    <para>Expression Parameters: SelectQuery uses "$" to denote named parameters
                        (e.g. "$myParam"), while EJBQL uses ":" (e.g. ":myParam"). Also EJBQL
                        supports positional parameters denoted by the question mark: "?3".</para>
                </listitem>
            </itemizedlist>
        </para>
    </section>