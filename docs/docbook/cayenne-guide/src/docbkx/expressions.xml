<?xml version="1.0" encoding="UTF-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements. See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to you under the Apache License, Version
    2.0 (the "License"); you may not use this file except in compliance
    with the License. You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0 Unless required by
    applicable law or agreed to in writing, software distributed under the
    License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
    CONDITIONS OF ANY KIND, either express or implied. See the License for
    the specific language governing permissions and limitations under the
    License.
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.0" xml:id="expressions">
    <title>Expressions</title>
    <section xml:id="expressions-overview">
        <title>Expressions Overview</title>
        <para>Cayenne provides a simple yet powerful object-based expression language. The most common
            usese of expressions are to build qualifiers and orderings of queries that are later
            converted to SQL by Cayenne and to evaluate in-memory against specific objects (to
            access certain values in the object graph or to perform in-memory object filtering and
            sorting). Cayenne provides API to build expressions in the code and a parser to create
            expressions from strings.</para>
    </section>
    <section xml:id="path-expressions">
        <title>Path Expressions</title>
        <para>Before discussing how to build expressions, it is important to understand one group of
            expressions widely used in Cayenne - path expressions. There are two types of path
            expressions - object and database, used for navigating graphs of connected objects or
            joined DB tables respectively. Object paths are much more commonly used, as after all
            Cayenne is supposed to provide a degree of isolation of the object model from the
            database. However database paths are helpful in certain situations. General structure of
            path expressions is the following:<programlisting> [db:]segment[+][.segment[+]...]</programlisting><itemizedlist>
                <listitem>
                    <para>&quot;db:&quot; is an optional prefix indicating that the following path is a DB
                        path. Otherwise it is an object path.</para>
                </listitem>
                <listitem>
                    <para>&quot;segment&quot; is a name of a property (relationship or attribute in Cayenne
                        terms) in the path. Path must have at least one segment; segments are
                        separated by dot (&quot;.&quot;).</para>
                </listitem>
                <listitem>
                    <para>&quot;+&quot; An &quot;OUTER JOIN&quot; path component. Currently &quot;+&quot; only has effect when
                        translated to SQL as OUTER JOIN. When evaluating expressions in memory, it
                        is ignored.</para>
                </listitem>
            </itemizedlist></para>
        <para>An object path expression represents a chain of property names rooted in a certain
            (unspecified during expression creation) object and &quot;navigating&quot; to its related value.
            E.g. a path expression &quot;artist.name&quot; might be a property path starting from a Painting
            object, pointing to the related Artist object, and then to its name attribute. A few
            more examples:</para>
        <para>
            <itemizedlist>
                <listitem>
                    <para>&quot;name&quot; - can be used to navigate (read) the &quot;name&quot; property of a Person
                        (or any other type of object that has a &quot;name&quot; property).</para>
                </listitem>
                <listitem>
                    <para>&quot;artist.exhibits.closingDate&quot; - can be used to navigate to a closing date
                        of any of the exhibits of a Painting&apos;s Artist object.</para>
                </listitem>
                <listitem>
                    <para>&quot;artist.exhibits+.closingDate&quot; - same as the previous example, but when
                        translated into SQL, an OUTER JOIN will be used for &quot;exhibits&quot;.</para>
                </listitem>
            </itemizedlist>
        </para>
        <para>Similarly a database path expression is a dot-separated path through DB table joins
            and columns. In Cayenne joins are mapped as DbRelationships with some symbolic names
            (the closest concept to DbRelationship name in the DB world is a named foreign key
            constraint. But DbRelationship names are usually chosen arbitrarily, without regard to
            constraints naming or even constraints presence). A database path therefore might look
            like this -  &quot;db:dbrelationshipX.dbrelationshipY.COLUMN_Z&quot;. More specific examples:<itemizedlist>
                <listitem>
                    <para>&quot;db:NAME&quot; - can be used to navigate to the value of &quot;NAME&quot; column of some
                        unspecified table.</para>
                </listitem>
                <listitem>
                    <para>&quot;db:artist.artistExhibits.exhibit.CLOSING_DATE&quot; - can be used to match a
                        closing date of any of the exhibits of a related artist record.</para>
                </listitem>
            </itemizedlist></para>
        <para>Cayenne supports &quot;aliases&quot; in path Expressions. E.g. the same expression can be
            written using explicit path or an alias:<itemizedlist>
                <listitem>
                    <para>&quot;artist.exhibits.closingDate&quot; - full path</para>
                </listitem>
                <listitem>
                    <para>&quot;e.closingDate&quot; - alias &quot;e&quot; is used for &quot;artist.exhibits&quot;.</para>
                </listitem>
            </itemizedlist>SelectQuery using the second form of the path expression must be made
            aware of the alias via <emphasis role="italic">
                &quot;SelectQuery.aliasPathSplits(..)&quot;</emphasis>, otherwise an Exception will be
            thrown. The main use of aliases is to allow users to control how SQL joins are generated
            if the same path is encountered more than once in any given Expression. Each alias for
            any given path would result in a separate join. Without aliases, a single join will be
            used for a group of matching paths.</para>
    </section>
    <section xml:id="expressions-from-strings">
        <title>Creating Expressions from Strings </title>
        <para>While in most cases users are likely to rely on API from the following section for
            expression creation, we&apos;ll start by showing String expressions, as this will help
            to understand the semantics. A Cayenne expression can be represented as a String, which
            can be converted to an expression object using <code>ExpressionFactory.exp</code> static
            method. Here is an
            example:<programlisting language="java">String expString = &quot;name like &apos;A%&apos; and price &lt; 1000&quot;;
Expression exp = ExpressionFactory.exp(expString);</programlisting>This
            particular expression may be used to match Paintings whose names that start with
            &quot;A&quot; and whose price is less than $1000. While this example is pretty
            self-explanatory, there are a few points worth mentioning. &quot;name&quot; and
            &quot;price&quot; here are object paths discussed earlier. As always, paths themselves
            are not attached to a specific root entity and can be applied to any entity that has
            similarly named attributes or relationships. So when we are saying that this expression
            &quot;may be used to match Paintings&quot;, we are implying that there may be other
            entities, for which this expression is valid. Now the expression details... </para>
        <para><emphasis role="italic">Character constants</emphasis> that are not paths or numeric values
            should be enclosed in single or double quotes. Two of the expressions below are
            equivalent:<programlisting language="SQL">name = &apos;ABC&apos;

// double quotes are escaped inside Java Strings of course
name = \&quot;ABC\&quot;</programlisting></para>
        <para><emphasis role="italic">Case sensitivity.</emphasis> Expression operators are case
            sensitive and are usually lowercase. Complex words follow the Java camel-case
            style:<programlisting language="SQL">// valid
name likeIgnoreCase &apos;A%&apos;

// invalid - will throw a parse exception
name LIKEIGNORECASE &apos;A%&apos;</programlisting></para>
        <para><emphasis role="italic">Grouping with parenthesis:</emphasis>
            <programlisting>value = (price + 250.00) * 3</programlisting>
        </para>
        <para><emphasis role="italic">Path prefixes.</emphasis> Object expressions are unquoted strings,
            optionally prefixed by &quot;obj:&quot; (usually they are not prefixed at all actually). Database
            expressions are always prefixed with &quot;db:&quot;. A special kind of prefix, not discussed yet
            is &quot;enum:&quot; that prefixes an enumeration
            constant:<programlisting language="SQL">// object path
name = &apos;Salvador Dali&apos;

// same object path - a rarely used form
obj:name = &apos;Salvador Dali&apos;

// multi-segment object path
artist.name = &apos;Salvador Dali&apos;

// db path
db:NAME = &apos;Salvador Dali&apos;

// enumeration constant
name = enum:org.foo.EnumClass.VALUE1</programlisting></para>
        <para>
            <emphasis role="italic">Binary conditions</emphasis> are expressions that contain a path
            on the left, a value on the right, and some operation between them, such as equals,
            like, etc. They can be used as qualifiers in SelectQueries:<programlisting language="SQL">name like &apos;A%&apos;</programlisting>
            <emphasis role="italic">Parameters.</emphasis> Expressions can contain named parameters
            (names that start with &quot;$&quot;) that can be substituted with values either by name
            or by position. Parameterized expressions allow to create reusable expression templates.
            Also if an Expression contains a complex object that doesn&apos;t have a simple String
            representation (e.g. a Date, a DataObject, an ObjectId), parameterizing such expression
            is the only way to represent it as String. Here are the examples of both positional and
            named parameter
            bindings:<programlisting language="java">Expression template = ExpressionFactory.exp(&quot;name = $name&quot;);
...
// name binding
Map p1 = Collections.singletonMap(&quot;name&quot;, &quot;Salvador Dali&quot;);
Expression qualifier1 = template.params(p1);
...
// positional binding
Expression qualifier2 = template.paramsArray(&quot;Monet&quot;);</programlisting></para>
        <para>Positional binding is usually shorter. You can pass positional bindings to the
                <code>"exp(..)"</code> factory method (its second argument is a params
            vararg):<programlisting>Expression qualifier = ExpressionFactory.exp(&quot;name = $name&quot;, &quot;Monet&quot;);</programlisting></para>
        <para>In parameterized expressions with LIKE clause, SQL wildcards must be part of the
            values in the Map and not the expression string
            itself:<programlisting language="java">Expression qualifier = ExpressionFactory.exp(&quot;name like $name&quot;, &quot;Salvador%&quot;);</programlisting>When
            matching on a relationship, the value parameter must be either a Persistent object, an
                <code>org.apache.cayenne.ObjectId</code>, or a numeric ID value (for single column
            IDs).
            E.g.:<programlisting language="java">Artist dali = ... // asume we fetched this one already
Expression qualifier = ExpressionFactory.exp(&quot;artist = $artist&quot;, dali);</programlisting>When
            using positional binding, Cayenne would expect values for <emphasis role="bold"
                >all</emphasis> parameters to be present. Binding by name offers extra flexibility:
            subexpressions with uninitialized parameters are automatically pruned from the
            expression. So e.g. if certain parts of the expression criteria are not provided to the
            application, you can still build a valid
            expression:<programlisting language="java">Expression template = ExpressionFactory.exp(&quot;name like $name and dateOfBirth &gt; $date&quot;);
...
Map p1 = Collections.singletonMap(&quot;name&quot;, &quot;Salvador%&quot;);
Expression qualifier1 = template.params(p1);

// "qualifier1" is now &quot;name like &apos;Salvador%&apos;&quot;.
// &apos;dateOfBirth &gt; $date&apos; condition was pruned, as no value was specified for 
// the $date parameter</programlisting></para>
        <para><emphasis role="italic">Null handling.</emphasis> Handling of Java nulls as operands
            is no different from normal values. Instead of using special conditional operators, like
            SQL does (IS NULL, IS NOT NULL), &quot;=&quot; and &quot;!=&quot; expressions are used
            directly with null values. It is up to Cayenne to translate expressions with nulls to
            the valid SQL.</para>
        <para>
            <note>
                <para>A formal definition of the expression grammar is provided in Appendix C</para>
            </note>
        </para>
    </section>
    <section xml:id="expressions-with-expressionfactory">
        <title>Creating Expressions via API</title>
        <para>Creating expressions from Strings is a powerful and dynamic approach, however a safer
            alternative is to use Java API. It provides compile-time checking of expressions
            validity. The API in question is provided by <code>ExpressionFactory</code> class (that
            we've seen already), <code>Property</code> class and <code>Expression</code> class
            itself. <code>ExpressionFactory</code> contains a number of self-explanatory static
            methods that can be used to build expressions. E.g.:</para>
        <para>
            <programlisting language="java">// String expression: name like &apos;A%&apos; and price &lt; 1000
Expression e1 = ExpressionFactory.likeExp("name", &quot;A%&quot;);
Expression e2 = ExpressionFactory.lessExp("price, 1000);
Expression finalExp = e1.andExp(e2); </programlisting>
            <note>
                <para>The last line in the example above shows how to create a new expression by
                    &quot;chaining&quot; two other epxressions. A common error when chaining
                    expressions is to assume that &quot;andExp&quot; and &quot;orExp&quot; append
                    another expression to the current expression. In fact a new expression is
                    created. I.e. Expression API treats existing expressions as immutable.</para>
            </note>
        </para>
        <para>As discussed earlier, Cayenne supports aliases in path Expressions, allowing to
            control how SQL joins are generated if the same path is encountered more than once in
            the same Expression. Two ExpressionFactory methods allow to implicitly generate aliases
            to &quot;split&quot; match paths into individual joins if
            needed:<programlisting language="java">Expression matchAllExp(String path, Collection values)
Expression matchAllExp(String path, Object... values)</programlisting></para>
        <para>&quot;Path&quot; argument to both of these methods can use a split character (a pipe
            symbol &apos;|&apos;) instead of dot to indicate that relationship following a path
            should be split into a separate set of joins, one per collection value. There can only
            be one split at most in any given path. Split must always precede a relationship. E.g.
                <code>"|exhibits.paintings"</code>, <code>"exhibits|paintings"</code>, etc.
            Internally Cayenne would generate distinct aliases for each of the split expressions,
            forcing separate joins.</para>
        <para>While ExpressionFactory is pretty powerful, there's an even easier way to create
            expression using static Property objects generated by Cayenne for each persistent class.
            Some
            examples:<programlisting>// Artist.NAME is generated by Cayenne and has a type of Property&lt;String>
Expression e1 = Artist.NAME.eq("Pablo");

// Chaining multiple properties into a path..
// Painting.ARTIST is generated by Cayenne and has a type of Property&lt;Artist>
Expression e2 = Painting.ARTIST.dot(Artist.NAME).eq("Pablo");</programlisting></para>
        <para>Property objects provide the API mostly analogius to ExpressionFactory, though it is
            significantly shorter and is aware of the value types. It provides compile-time checks
            of both property names and types of arguments in conditions. We will use Property-based
            API in further examples.</para>
    </section>
    <section xml:id="expressions-in-memory">
        <title>Evaluating Expressions in Memory</title>
        <para>When used in a query, an expression is converted to SQL WHERE clause (or ORDER BY
            clause) by Cayenne during query execution. Thus the actual evaluation against the data
            is done by the database engine. However the same expressions can also be used for
            accessing object properties, calculating values, in-memory filtering. </para>
        <para>Checking whether an object satisfies an
            expression:<programlisting language="java">Expression e = Artist.NAME.in(&quot;John&quot;, &quot;Bob&quot;);
Artist artist = ...
if(e.match(artist)) {
   ...
}</programlisting>Reading
            property
            value:<programlisting language="java">String name = Artist.NAME.path().evaluate(artist);</programlisting></para>
        <para>Filtering a list of
            objects:<programlisting language="java">Expression e = Artist.NAME.in(&quot;John&quot;, &quot;Bob&quot;);
List&lt;Artist&gt; unfiltered = ...
List&lt;Artist&gt; filtered = e.filterObjects(unfiltered);</programlisting></para>
        <para>
            <note>
                <para>Current limitation of in-memory expressions is that no collections are
                    permitted in the property path.</para>
            </note>
        </para>
    </section>

    <section xml:id="expressions-to-ejbql">
        <title>Translating Expressions to EJBQL</title>
        <para>
            <link linkend="ejbqlquery">EJBQL</link> is a textual query language that can be used
            with Cayenne. In some situations, it is convenient to be able to convert Expression
            instances into EJBQL. Expressions support this conversion. An example is shown below.
            <programlisting language="java">String serial = ...
Expression e = Pkg.SERIAL.eq(serial);
List&lt;Object&gt; params = new ArrayList&lt;Object&gt;();
EJBQLQuery query = new EJBQLQuery("SELECT p FROM Pkg p WHERE " + e.toEJBQL(params,&quot;p&quot;);

for(int i=0;i&lt;params.size();i++) {
  query.setParameter(i+1, params.get(i));
}</programlisting>
            This would be equivalent to the following purely EJBQL querying logic;
            <programlisting language="java">EJBQLQuery query = new EJBQLQuery("SELECT p FROM Pkg p WHERE p.serial = ?1");
query.setParameter(1,serial);</programlisting>
        </para>
    </section>
</chapter>
