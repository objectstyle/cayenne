<?xml version="1.0" encoding="UTF-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements. See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to you under the Apache License, Version
    2.0 (the "License"); you may not use this file except in compliance
    with the License. You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0 Unless required by
    applicable law or agreed to in writing, software distributed under the
    License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
    CONDITIONS OF ANY KIND, either express or implied. See the License for
    the specific language governing permissions and limitations under the
    License.
-->
<chapter xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
    <title>Setting up Hessian Web Service</title>
    <section xml:id="setting-up-dependencies">
        <title>Setting up Dependencies</title>
        <para>Now lets get back to the "tutorial" project that contains a web application and set up
            dependencies. The only extra one that we don't have yet is resin-hessian.jar, just like
            the client, so let's add it (and the caucho repo declaration) to the pom.xml.</para>
        <programlisting>&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"&gt;
    ...
    &lt;dependencies&gt;
        ...
        &lt;dependency&gt;
            &lt;groupId&gt;com.caucho&lt;/groupId&gt;
            &lt;artifactId&gt;hessian&lt;/artifactId&gt;
            &lt;version&gt;4.0.38&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
    ...
    &lt;/build&gt;

    &lt;repositories&gt;
        &lt;repository&gt;
            &lt;id&gt;caucho&lt;/id&gt;
            &lt;name&gt;Caucho Repository&lt;/name&gt;
            &lt;url&gt;http://caucho.com/m2&lt;/url&gt;
            &lt;layout&gt;default&lt;/layout&gt;
            &lt;snapshots&gt;
                &lt;enabled&gt;false&lt;/enabled&gt;
            &lt;/snapshots&gt;
            &lt;releases&gt;
                &lt;enabled&gt;true&lt;/enabled&gt;
            &lt;/releases&gt;
        &lt;/repository&gt;
    &lt;/repositories&gt;
    &lt;/project&gt;</programlisting>
        
        <note>
            <para><emphasis role="bold">Maven Optimization
                Hint</emphasis> On a real project both server and client modules will
                likely share a common parent pom.xml where common repository delcaration can
                be placed, with child pom's "inheriting" it from parent. This would reduce
                build code duplication.</para>
        </note>
    </section>
    <section xml:id="client-classes-on-server">
        <title>Client Classes on the Server</title>
        <para>Since ROP web service requires both server and client persistent classes, we need to
            generate a second copy of the client classes inside the server project. This is a minor
            inconvenience that will hopefully go away in the future versions of Cayenne. <emphasis
                role="italic">Don't forget to refresh the project in Eclipse after class generation
                is done.</emphasis></para>
    </section>
    <section xml:id="configuring-web-xml">
        <title>Configuring web.xml</title>
        <para>Cayenne web service is declared in the web.xml. It is implemented as a servlet
            "org.apache.cayenne.rop.ROPServlet". Open
            tutorial/src/main/webapp/WEB-INF/web.xml in Eclipse and add a service declaration: </para>
        <programlisting>&lt;?xml version="1.0" encoding="utf-8"?>
 &lt;!DOCTYPE web-app
   PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
   "http://java.sun.com/dtd/web-app_2_3.dtd">
&lt;web-app>
    &lt;display-name>Cayenne Tutorial&lt;/display-name>
    &lt;servlet>
        &lt;servlet-name>cayenne-project&lt;/servlet-name>
        &lt;servlet-class>org.apache.cayenne.rop.ROPServlet&lt;/servlet-class>
        &lt;load-on-startup>0&lt;/load-on-startup>
    &lt;/servlet>
    &lt;servlet-mapping>
        &lt;servlet-name>cayenne-project&lt;/servlet-name>
        &lt;url-pattern>/cayenne-service&lt;/url-pattern>
    &lt;/servlet-mapping>
    &lt;/web-app></programlisting>
        <note>
            <para><emphasis role="bold">Extending Server Behavior via
                Callbacks</emphasis> While no custom Java code is required on the
                server, just a service declaration, it is possible to customizing
                server-side behavior via callbacks and listeners (not shown in the
                tutorial).</para>
        </note>
    </section>
    <section xml:id="running-rop-server">
        <title>Running ROP Server</title>
        <para>Use previosly
                created Eclipse Jetty run configuration available via "Run &gt; Run
            Configurations..." (or create a new
                one if none exists yet). You should see output in the Eclipse console similar
            to the following:</para>
        <programlisting>[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building tutorial 0.0.1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
...
[INFO] Starting jetty 6.1.22 ...
INFO::jetty-6.1.22
INFO::No Transaction manager found - if your webapp requires one, please configure one.
INFO::Started SelectChannelConnector@0.0.0.0:8080
[INFO] Started Jetty Server
INFO: Loading XML configuration resource from file:cayenne-project.xml
INFO: loading user name and password.
INFO: Created connection pool: jdbc:derby:memory:testdb;create=true
    Driver class: org.apache.derby.jdbc.EmbeddedDriver
    Min. connections in the pool: 1
    Max. connections in the pool: 1</programlisting>
        <para>Cayenne ROP service URL is <emphasis role="italic"
                >http://localhost:8080/tutorial/cayenne-service</emphasis>. If you click on it, you
            will see "Hessian Requires POST" message, that means that the service is alive, but you
            need a client other than the web browser to access it.</para>
    </section>
</chapter>
