<?xml version="1.0" encoding="UTF-8"?>
<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ~   Licensed to the Apache Software Foundation (ASF) under one
  ~  or more contributor license agreements.  See the NOTICE file
  ~  distributed with this work for additional information
  ~  regarding copyright ownership.  The ASF licenses this file
  ~  to you under the Apache License, Version 2.0 (the
  ~  "License"); you may not use this file except in compliance
  ~  with the License.  You may obtain a copy of the License at
  ~
  ~    http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~  Unless required by applicable law or agreed to in writing,
  ~  software distributed under the License is distributed on an
  ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~  KIND, either express or implied.  See the License for the
  ~  specific language governing permissions and limitations
  ~  under the License.
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
<section xmlns="http://docbook.org/ns/docbook" xml:id="procedurequery">
    <title>ProcedureQuery</title>
    <para>Stored procedures are mapped as separate objects in CayenneModeler. ProcedureQuery
        provides a way to execute them with a certain set of parameters. Just like with
        SQLTemplate, the outcome of a procedure can be anything - a single result set, mutliple
        result sets, some data modification (returned as an update count), or a combination of
        these. So use "performQuery" to get a single result set, and use "performGenericQuery"
        for anything
        else:<programlisting language="java">ProcedureQuery query = new ProcedureQuery("my_procedure", Artist.class);

// Set "IN" parameter values
query.addParam("p1", "abc");
query.addParam("p2", 3000);

List&lt;Artist> result = context.performQuery(query);</programlisting><programlisting language="java">// here we do not bother with root class.
// Procedure name gives us needed routing information
ProcedureQuery query = new ProcedureQuery("my_procedure");

query.addParam("p1", "abc");
query.addParam("p2", 3000);

QueryResponse response = context.performGenericQuery(query); </programlisting></para>
    <para>A stored procedure can return data back to the application as result sets or via OUT
        parameters. To simplify the processing of the query output, QueryResponse treats OUT
        parameters as if it was a separate result set. If a stored procedure declares any OUT or
        INOUT parameters, QueryResponse will contain their returned values in the very first
        result
        list:<programlisting language="java">ProcedureQuery query = new ProcedureQuery("my_procedure");
QueryResponse response = context.performGenericQuery(query);

// read OUT parameters
List out = response.firstList();

if(!out.isEmpty()) {
    Map outParameterValues = (Map) outList.get(0);
}</programlisting></para>
    <para>There maybe a situation when a stored procedure handles its own transactions, but an
        application is configured to use Cayenne-managed transactions. This is obviously
        conflicting and undesirable behavior. In this case ProcedureQueries should be executed
        explicitly wrapped in an "external" Transaction. This is one of the few cases when a
        user should worry about transactions at all. See Transactions section for more
        details.</para>
    <para>
        <warning>
            <para>This query is superseded by <code>ProcedureCall</code> and generally shouldn't be used.</para>
        </warning>
    </para>
</section>