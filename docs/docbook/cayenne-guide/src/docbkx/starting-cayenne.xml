<?xml version="1.0" encoding="UTF-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements. See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to you under the Apache License, Version
    2.0 (the "License"); you may not use this file except in compliance
    with the License. You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0 Unless required by
    applicable law or agreed to in writing, software distributed under the
    License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
    CONDITIONS OF ANY KIND, either express or implied. See the License for
    the specific language governing permissions and limitations under the
    License.
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.0" xml:id="starting-cayenne">
    <title>Starting Cayenne</title>
    <section xml:id="starting-serverruntime">
        <title>Starting and Stopping ServerRuntime</title>
        <para>In runtime Cayenne is accessed via
                <code>org.apache.cayenne.configuration.server.ServerRuntime</code>. ServerRuntime is
            created by calling a convenient builder:
            <programlisting language="java">ServerRuntime runtime = ServerRuntime.builder()
                .addConfig("com/example/cayenne-project.xml")
                .build();</programlisting></para>
        <para>The parameter you pass to the builder is a location of the main project file. Location
            is a '/'-separated path (same path separator is used on UNIX and Windows) that is
            resolved relative to the application classpath. The project file can be placed in the
            root package or in a subpackage (e.g. in the code above it is in "com/example"
            subpackage).</para>
        <para>ServerRuntime encapsulates a single Cayenne stack. Most applications will just have
            one ServerRuntime using it to create as many ObjectContexts as needed, access the
            Dependency Injection (DI) container and work with other Cayenne features. Internally
            ServerRuntime is just a thin wrapper around the DI container. Detailed features of the
            container are discussed in <link linkend="customizing-cayenne-runtime">"Customizing Cayenne Runtime"</link> chapter. Here we'll just show
            an example of how an application might turn on external transactions:<programlisting language="java">Module extensions = binder ->
                ServerModule.contributeProperties(binder).put(Constants.SERVER_EXTERNAL_TX_PROPERTY, "true");
ServerRuntime runtime = ServerRuntime.builder()
                .addConfig("com/example/cayenne-project.xml")
                .addModule(extensions)
                .build();</programlisting></para>
        <para>It is a good idea to shut down the runtime when it is no longer needed, usually before the
            application itself is shutdown: <programlisting language="java">runtime.shutdown();</programlisting>When
            a runtime object has the same scope as the application, this may not be always
            necessary, however in some cases it is essential, and is generally considered a good
            practice. E.g. in a web container hot redeploy of a webapp will cause resource leaks and
            eventual OutOfMemoryError if the application fails to shutdown CayenneRuntime.</para>
    </section>
    <section>
        <title>Merging Multiple Projects</title>
        <para>ServerRuntime requires at least one mapping project to run. But it can also take multiple
            projects and merge them together in a single configuration. This way different parts of
            a database can be mapped independently from each other (even by different software
            providers), and combined in runtime when assembling an application. Doing it is as easy
            as passing multiple project locations to ServerRuntime builder:</para><programlisting language="java">ServerRuntime runtime = ServerRuntime.builder()
        .addConfig("com/example/cayenne-project.xml")
        .addConfig("org/foo/cayenne-library1.xml")
        .addConfig("org/foo/cayenne-library2.xml")
        .build();</programlisting>
        <para>When the projects are merged, the following rules are applied:<itemizedlist>
                <listitem>
                    <para>The order of projects matters during merge. If there are two conflicting
                        metadata objects belonging to two projects, an object from the <emphasis
                            role="italic">last</emphasis> project takes precedence over the object
                        from the first one. This makes possible to override pieces of metadata. This
                        is also similar to how DI modules are merged in Cayenne.</para>
                </listitem>
                <listitem>
                    <para>Runtime DataDomain name is set to the name of the last project in the
                        list.</para>
                </listitem>
                <listitem>
                    <para>Runtime DataDomain properties are the same as the properties of the last
                        project in the list. I.e. <emphasis role="italic">properties are not
                            merged</emphasis> to avoid invalid combinations and unexpected runtime
                        behavior.</para>
                </listitem>
                <listitem>
                    <para>If there are two or more DataMaps with the same name, only one DataMap is
                        used in the merged project, the rest are discarded. Same precedence rules
                        apply - DataMap from the project with the highest index in the project list
                        overrides all other DataMaps with the same name.</para>
                </listitem>
                <listitem>
                    <para>If there are two or more DataNodes with the same name, only one DataNodes
                        is used in the merged project, the rest are discarded. DataNode coming from
                        project with the highest index in the project list is chosen per precedence
                        rule above.</para>
                </listitem>
                <listitem>
                    <para>There is a notion of "default" DataNode. After the merge if any DataMaps
                        are not explicitly linked to DataNodes, their queries will be executed via a
                        default DataNode. This makes it possible to build mapping "libraries" that
                        are only associated with a specific database in runtime. If there's only one
                        DataNode in the merged project, it will be automatically chosen as default.
                        A possible way to explicitly designate a specific node as default is to
                        override <code>DataDomainProvider.createAndInitDataDomain()</code>.</para>
                </listitem>
            </itemizedlist></para>
    </section>
    <section xml:id="webapps">
        <title>Web Applications</title>
        <para>Web applications can use a variety of mechanisms to configure and start the "services"
            they need, Cayenne being one of such services. Configuration can be done within standard
            Servlet specification objects like Servlets, Filters, or ServletContextListeners, or can
            use Spring, JEE CDI, etc. This is a user's architectural choice and Cayenne is agnostic
            to it and will happily work in any environment. As described above, all that is needed
            is to create an instance of ServerRuntime somewhere and provide the application code
            with means to access it. And shut it down when the application ends to avoid container
            leaks.</para>
        <para>Still Cayenne includes a piece of web app configuration code that can assist in
            quickly setting up simple Cayenne-enabled web applications. We are talking about
            CayenneFilter. It is declared in
            web.xml:<programlisting language="xml">&lt;web-app>
    ...
    &lt;filter>
        &lt;filter-name>cayenne-project&lt;/filter-name>
        &lt;filter-class>org.apache.cayenne.configuration.web.CayenneFilter&lt;/filter-class>
    &lt;/filter>
     &lt;filter-mapping>
        &lt;filter-name>cayenne-project&lt;/filter-name>
        &lt;url-pattern>/*&lt;/url-pattern>
     &lt;/filter-mapping>
    ...
 &lt;/web-app>       </programlisting></para>
        <para>When started by the web container, it creates a instance of ServerRuntime and stores
            it in the ServletContext. Note that the name of Cayenne XML project file is derived from
            the "filter-name". In the example above CayenneFilter will look for an XML file
            "cayenne-project.xml". This can be overridden with "configuration-location" init
            parameter.</para>
        <para>When the application runs, all HTTP requests matching the filter url-pattern will have
            access to a session-scoped ObjectContext like
            this:<programlisting language="java">ObjectContext context = BaseContext.getThreadObjectContext();</programlisting>Of
            course the ObjectContext scope, and other behavior of the Cayenne runtime can be
            customized via dependency injection. For this another filter init parameter called
            "extra-modules" is used. "extra-modules" is a comma or space-separated list of class
            names, with each class implementing Module interface. These optional custom modules are
            loaded after the the standard ones, which allows users to override all standard
            definitions.</para>
        <para>For those interested in the DI container contents of the runtime created by CayenneFilter,
            it is the same ServerRuntime as would've been created by other means, but with an extra
                <code>org.apache.cayenne.configuration.web.WebModule</code> module that provides
                <code>org.apache.cayenne.configuration.web.RequestHandler</code> service. This is
            the service to override in the custom modules if you need to provide a different
            ObjectContext scope, etc.</para>
        <para>
            <note>
                <para>You should not think of CayenneFilter as the only way to start and use Cayenne in a web
                    application. In fact CayenneFilter is entirely optional. Use it if you don't
                    have any special design for application service management. If you do, simply
                    integrate Cayenne into that design.</para>
            </note>
        </para>
    </section>
</chapter>
