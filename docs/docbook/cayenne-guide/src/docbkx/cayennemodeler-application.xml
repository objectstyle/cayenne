<?xml version="1.0" encoding="UTF-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements. See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to you under the Apache License, Version
    2.0 (the "License"); you may not use this file except in compliance
    with the License. You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0 Unless required by
    applicable law or agreed to in writing, software distributed under the
    License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
    CONDITIONS OF ANY KIND, either express or implied. See the License for
    the specific language governing permissions and limitations under the
    License.
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.0" xml:id="cayennemodeler-application">
    <title>CayenneModeler Application</title>
    <section xml:id="working-with-mapping-projects">
        <title>Working with Mapping Projects</title>
        <para></para>
    </section>
    <section xml:id="reverse-engineering-database">
        <title>Reverse Engineering Database</title>
        <para>
            See chapter <link linkend="re-modeler">Reverse Engineering in Cayenne Modeler</link>
        </para>
    </section>
    <section xml:id="generating-database-schema">
        <title>Generating Database Schema</title>
        <para>
            With Cayenne Modeler you can create simple database schemas without any additional database tools.
            This is a good option for initial database setup if you completely created you model with the Modeler.
            You can start SQL schema generation by selecting menu
            <emphasis role="strong">
                <guimenu>Tools</guimenu> &gt; <guimenuitem>Generate Database Schema</guimenuitem>
            </emphasis>
        </para>
        <para>
            You can select what database parts should be generated and what tables you want
        </para>
    </section>
    <section xml:id="migrations">
        <title>Migrations</title>
        <para> </para>
    </section>
    <section xml:id="generating-java-classes">
        <title>Generating Java Classes</title>
        <para>
            Before using Cayenne in you code you need to generate java source code for persistent objects.
            This can be done with Modeler GUI or via <link linkend="mvn-cgen">cgen</link> maven/ant plugin.
        </para>
        <para>
            To generate classes in the modeler use
            <emphasis role="strong">
                <guimenu>Tools</guimenu> &gt; <guimenuitem>Generate Classes</guimenuitem>
            </emphasis>
        </para>
        <para>
            There is three default types of code generation
            <itemizedlist>
                <listitem>
                    <para><emphasis role="strong">Standard Persistent Objects</emphasis></para>
                    <para>
                        Default type of generation suitable for almost all cases.
                        Use this type unless you now what exactly you need to customize.
                    </para>
                </listitem>
                <listitem>
                    <para><emphasis role="strong">Client Persistent Objects</emphasis></para>
                    <para>

                    </para>
                </listitem>
                <listitem>
                    <para><emphasis role="strong">Advanced.</emphasis></para>
                    <para>
                        In advanced mode you can control almost all aspects of code generation including custom templates for java code.
                        See default Cayenne templates on
                        <link xlink:href="https://github.com/apache/cayenne/tree/master/cayenne-tools/src/main/resources/templates/v1_2">GitHub</link>
                        as an example
                    </para>
                </listitem>
            </itemizedlist>
        </para>
    </section>
    <section xml:id="modeling-inheritance">
        <title>Modeling Inheritance</title>
        <para> </para>
    </section>
    <section xml:id="modeling-generic-persistence-classes">
        <title>Modeling Generic Persistent Classes</title>
        <para>Normally each ObjEntity is mapped to a specific Java class (such as Artist or
            Painting) that explicitly declare all entity properties as pairs of getters and setters.
            However Cayenne allows to map a completly generic class to any number of entities. The
            only expectation is that a generic class implements
                <emphasis>org.apache.cayenne.DataObject</emphasis>. So an ideal candidate for a
            generic class is CayenneDataObject, or some custom subclass of CayenneDataObject.</para>
        <para>If you don't enter anything for Java Class of an ObjEntity, Cayenne assumes generic
            mapping and uses the following implicit rules to determine a class of a generic object.
            If DataMap "Custom Superclass" is set, runtime uses this class to instantiate new
            objects. If not, org.apache.cayenne.CayenneDataObject is used.</para>
        <para>Class generation procedures (either done in the Modeler or with Ant or Maven) would
            skip entities that are mapped to CayenneDataObject explicitly or have no class
            mapping.</para>
    </section>
    <section xml:id="mapping-objattributes-to-custom-classes">
        <title>Mapping ObjAttributes to Custom Classes</title>
        <para> </para>
    </section>
    <section xml:id="modeling-pk-generation-strategy">
        <title>Modeling Primary Key Generation Strategy</title>
        <para> </para>
    </section>
</chapter>
