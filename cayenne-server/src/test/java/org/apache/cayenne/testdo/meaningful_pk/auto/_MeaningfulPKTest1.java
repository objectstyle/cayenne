package org.apache.cayenne.testdo.meaningful_pk.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;
import org.apache.cayenne.testdo.meaningful_pk.MeaningfulPKDep;

/**
 * Class _MeaningfulPKTest1 was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _MeaningfulPKTest1 extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String PK_ATTRIBUTE_PK_COLUMN = "PK_ATTRIBUTE";

    public static final Property<String> DESCR = Property.create("descr", String.class);
    public static final Property<Integer> PK_ATTRIBUTE = Property.create("pkAttribute", Integer.class);
    public static final Property<List<MeaningfulPKDep>> MEANINGFUL_PKDEP_ARRAY = Property.create("meaningfulPKDepArray", List.class);

    protected String descr;
    protected Integer pkAttribute;

    protected Object meaningfulPKDepArray;

    public void setDescr(String descr) {
        beforePropertyWrite("descr", this.descr, descr);
        this.descr = descr;
    }

    public String getDescr() {
        beforePropertyRead("descr");
        return this.descr;
    }

    public void setPkAttribute(Integer pkAttribute) {
        beforePropertyWrite("pkAttribute", this.pkAttribute, pkAttribute);
        this.pkAttribute = pkAttribute;
    }

    public Integer getPkAttribute() {
        beforePropertyRead("pkAttribute");
        return this.pkAttribute;
    }

    public void addToMeaningfulPKDepArray(MeaningfulPKDep obj) {
        addToManyTarget("meaningfulPKDepArray", obj, true);
    }

    public void removeFromMeaningfulPKDepArray(MeaningfulPKDep obj) {
        removeToManyTarget("meaningfulPKDepArray", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<MeaningfulPKDep> getMeaningfulPKDepArray() {
        return (List<MeaningfulPKDep>)readProperty("meaningfulPKDepArray");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "descr":
                return this.descr;
            case "pkAttribute":
                return this.pkAttribute;
            case "meaningfulPKDepArray":
                return this.meaningfulPKDepArray;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "descr":
                this.descr = (String)val;
                break;
            case "pkAttribute":
                this.pkAttribute = (Integer)val;
                break;
            case "meaningfulPKDepArray":
                this.meaningfulPKDepArray = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.descr);
        out.writeObject(this.pkAttribute);
        out.writeObject(this.meaningfulPKDepArray);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.descr = (String)in.readObject();
        this.pkAttribute = (Integer)in.readObject();
        this.meaningfulPKDepArray = in.readObject();
    }

}
