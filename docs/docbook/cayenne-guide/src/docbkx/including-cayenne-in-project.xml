<?xml version="1.0" encoding="UTF-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements. See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to you under the Apache License, Version
    2.0 (the "License"); you may not use this file except in compliance
    with the License. You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0 Unless required by
    applicable law or agreed to in writing, software distributed under the
    License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
    CONDITIONS OF ANY KIND, either express or implied. See the License for
    the specific language governing permissions and limitations under the
    License.
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.0" xml:id="including-cayenne-in-project">
    <title>Including Cayenne in a Project</title>
    <section xml:id="jar-files-and-depdendencies">
        <title>Jar Files and Dependencies</title>
        <para>Cayenne distribution contains the following core runtime jars in the distribution
                <code>lib</code> directory: <itemizedlist>
                <listitem>
                    <para><emphasis role="italic">cayenne-server-<?eval ${project.version}?>.jar</emphasis> - contains full
                        Cayenne runtime (DI, adapters, DB access classes, etc.). Most applications
                        will use only this file.</para>
                </listitem>
                <listitem>
                    <para>cayenne-client-<?eval ${project.version}?>.jar - a subset of cayenne-server.jar trimmed for use on
                        the client in an <link linkend="introduction-to-rop">ROP application</link>.</para>
                </listitem>
                <listitem>
                    <para>Other cayenne-* jars - various Cayenne extensions.</para>
                </listitem>
            </itemizedlist></para>
        <para>When using <code>cayenne-server-<?eval ${project.version}?>.jar</code> you'll need a few third party jars (all
            included in <code>lib/third-party</code> directory of the distribution): <itemizedlist>
                <listitem>
                    <para><link xlink:href="http://velocity.apache.org/">Apache Velocity
                            Template Engine</link>, version 1.6.x (and all its dependencies bundled
                        with velocity-dep)</para>
                </listitem>
                <listitem>
                    <para><link xlink:href="http://commons.apache.org/collections/">Apache Commons
                            Collections</link>, version 3.2.1</para>
                </listitem>
                <listitem>
                    <para><link xlink:href="http://commons.apache.org/logging/">Apache
                            Commons Logging</link>, version 1.1</para>
                </listitem>
            </itemizedlist></para>
        <para>Cayenne integrates with various caching, clustering and other frameworks. These
            optional integrations will require other third-party jars that the users will need to
            obtain on their own.</para>
    </section>
    <section xml:id="maven-projects">
        <title>Maven Projects</title>
        <para>If you are using Maven, you won't have to deal with figuring out the dependencies. You
            can simply include cayenne-server artifact in your
            POM:<programlisting language="xml">&lt;dependency>
   &lt;groupId>org.apache.cayenne&lt;/groupId>
   &lt;artifactId>cayenne-server&lt;/artifactId>
   &lt;version><?eval ${project.version}?>&lt;/version>
&lt;/dependency></programlisting></para>
        <para>Additionally Cayenne provides a Maven plugin with a set of goals to perform various project
            tasks, such as synching generated Java classes with the mapping, described in the
            following subsection. The full plugin name is
                <code>org.apache.cayenne.plugins:cayenne-maven-plugin</code>.</para>
        <section xml:id="mvn-cgen">
            <title>cgen</title>
            <para><code>cgen</code> is a <code>cayenne-maven-plugin</code> goal that generates and maintains
                source (.java) files of persistent objects based on a DataMap. By default, it is
                bound to the generate-sources phase. If "makePairs" is set to "true" (which is the
                recommended default), this task will generate a pair of classes
                (superclass/subclass) for each ObjEntity in the DataMap. Superclasses should not be
                changed manually, since they are always overwritten. Subclasses are never
                overwritten and may be later customized by the user. If "makePairs" is set to
                "false", a single class will be generated for each ObjEntity. </para>
            <para>By creating custom templates, you can use cgen to generate other output (such as
                web pages, reports, specialized code templates) based on DataMap information.</para>
            <para>
                <table frame="void">
                    <caption>cgen required parameters</caption>
                    <col width="14%"/>
                    <col width="7%"/>
                    <col width="79%"/>
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Type</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td><code>map</code>
                            </td>
                            <td>File</td>
                            <td>DataMap XML file which serves as a source of metadata for class
                                generation. E.g.
                                    <code>${project.basedir}/src/main/resources/my.map.xml</code></td>
                        </tr>
                    </tbody>
                </table>
                <table frame="void">
                    <caption>cgen optional parameters</caption>
                    <col width="14%"/>
                    <col width="7%"/>
                    <col width="79%"/>
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Type</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td><code>additionalMaps</code>
                            </td>
                            <td>File</td>
                            <td>A directory that contains additional DataMap XML files that may be
                                needed to resolve cross-DataMap relationships for the the main
                                DataMap, for which class generation occurs.</td>
                        </tr>
                        <tr>
                            <td><code>client</code></td>
                            <td>boolean</td>
                            <td>Whether we are generating classes for the client tier in a Remote
                                Object Persistence application. "False" by default.</td>
                        </tr>
                        <tr>
                            <td><code>destDir</code></td>
                            <td>File</td>
                            <td>Root destination directory for Java classes (ignoring their package
                                names). The default is "src/main/java".</td>
                        </tr>
                        <tr>
                            <td><code>embeddableTemplate</code></td>
                            <td>String</td>
                            <td>Location of a custom Velocity template file for Embeddable class
                                generation. If omitted, default template is used.</td>
                        </tr>
                        <tr>
                            <td><code>embeddableSuperTemplate</code></td>
                            <td>String</td>
                            <td>Location of a custom Velocity template file for Embeddable
                                superclass generation. Ignored unless "makepairs" set to "true". If
                                omitted, default template is used.</td>
                        </tr>
                        <tr>
                            <td><code>encoding</code></td>
                            <td>String</td>
                            <td>Generated files encoding if different from the default on current
                                platform. Target encoding must be supported by the JVM running the
                                build. Standard encodings supported by Java on all platforms are
                                US-ASCII, ISO-8859-1, UTF-8, UTF-16BE, UTF-16LE, UTF-16. See
                                javadocs for java.nio.charset.Charset for more information.</td>
                        </tr>
                        <tr>
                            <td><code>excludeEntities</code></td>
                            <td>String</td>
                            <td>A comma-separated list of ObjEntity patterns (expressed as a perl5
                                regex) to exclude from template generation. By default none of the
                                DataMap entities are excluded.</td>
                        </tr>
                        <tr>
                            <td><code>includeEntities</code></td>
                            <td>String</td>
                            <td>A comma-separated list of ObjEntity patterns (expressed as a perl5
                                regex) to include from template generation. By default all DataMap
                                entities are included.</td>
                        </tr>
                        <tr>
                            <td><code>makePairs</code></td>
                            <td>boolean</td>
                            <td>If "true" (a recommended default), will generate subclass/superclass
                                pairs, with all generated code placed in superclass.</td>
                        </tr>
                        <tr>
                            <td><code>mode</code></td>
                            <td>String</td>
                            <td>Specifies class generator iteration target. There are three possible
                                values: "entity" (default), "datamap", "all". "entity" performs one
                                generator iteration for each included ObjEntity, applying either
                                standard to custom entity templates. "datamap" performs a single
                                iteration, applying DataMap templates. "All" is a combination of
                                entity and datamap.</td>
                        </tr>
                        <tr>
                            <td><code>overwrite</code></td>
                            <td>boolean</td>
                            <td>Only has effect when "makePairs" is set to "false". If "overwrite"
                                is "true", will overwrite older versions of generated classes.</td>
                        </tr>
                        <tr>
                            <td><code>superPkg</code></td>
                            <td>String</td>
                            <td>Java package name of all generated superclasses. If omitted, each
                                superclass will be placed in the subpackage of its subclass called
                                "auto". Doesn't have any effect if either "makepairs" or
                                "usePkgPath" are false (both are true by default). </td>
                        </tr>
                        <tr>
                            <td><code>superTemplate</code></td>
                            <td>String</td>
                            <td>Location of a custom Velocity template file for ObjEntity superclass
                                generation. Only has effect if "makepairs" set to "true". If
                                omitted, default template is used.</td>
                        </tr>
                        <tr>
                            <td><code>template</code></td>
                            <td>String</td>
                            <td>Location of a custom Velocity template file for ObjEntity class
                                generation. If omitted, default template is used.</td>
                        </tr>
                        <tr>
                            <td><code>usePkgPath</code></td>
                            <td>boolean</td>
                            <td>If set to "true" (default), a directory tree will be generated in
                                "destDir" corresponding to the class package structure, if set to
                                "false", classes will be generated in "destDir" ignoring their
                                package.</td>
                        </tr>
                        <tr>
                            <td><code>createPropertyNames</code></td>
                            <td>boolean</td>
                            <td>If set to "true", will generate String Property names.
                                Default is "false"</td>
                        </tr>
                    </tbody>
                </table> Example - a typical class generation scenario, where pairs of classes are
                generated with default Maven source destination and superclass
                package:<programlisting language="xml">&lt;plugin>
    &lt;groupId>org.apache.cayenne.plugins&lt;/groupId>
    &lt;artifactId>cayenne-maven-plugin&lt;/artifactId>
    &lt;version><?eval ${project.version}?>&lt;/version>

    &lt;configuration>
        &lt;map>${project.basedir}/src/main/resources/my.map.xml&lt;/map>
    &lt;/configuration>

    &lt;executions>
        &lt;execution>
            &lt;goals>
                &lt;goal>cgen&lt;/goal>
            &lt;/goals>
        &lt;/execution>
    &lt;/executions>
&lt;/plugin></programlisting></para>
		</section>
		<section xml:id="mvn-cdbgen">
			<title>cdbgen</title>
			<para><code>cdbgen</code> is a <code>cayenne-maven-plugin</code> goal that drops and/or generates
				tables in a database on Cayenne DataMap. By default, it is bound to the
				pre-integration-test phase.
				<table frame="void">
					<caption>cdbgen required parameters</caption>
					<col width="14%"/>
					<col width="7%"/>
					<col width="79%"/>
					<thead>
						<tr>
							<th>Name</th>
							<th>Type</th>
							<th>Description</th>
						</tr>
					</thead>
					<tbody>
						<tr>
							<td><code>map</code>
							</td>
							<td>File</td>
							<td>DataMap XML file which serves as a source of metadata for DB schema
								generation. E.g.
									<code>${project.basedir}/src/main/resources/my.map.xml</code></td>
						</tr>
                        <tr>
                            <td><code>dataSource</code>
                            </td>
                            <td>XML</td>
                            <td>An object that contains Data Source parameters</td>
                        </tr>
					</tbody>
				</table>
            </para>
            <para>
                <table frame="void">
                    <caption>&lt;dataSource> parameters</caption>
                    <col width="14%"/>
                    <col width="7%"/>
                    <col width="7%"/>
                    <col width="72%"/>
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Type</th>
                            <th>Required</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td><code>driver</code></td>
                            <td>String</td>
                            <td>Yes</td>
                            <td>A class of JDBC driver to use for the target database.</td>
                        </tr>
                        <tr>
                            <td><code>url</code></td>
                            <td>String</td>
                            <td>Yes</td>
                            <td>JDBC URL of a target database.</td>
                        </tr>
                        <tr>
                            <td><code>username</code></td>
                            <td>String</td>
                            <td>No</td>
                            <td>Database user name.</td>
                        </tr>
                        <tr>
                            <td><code>password</code></td>
                            <td>String</td>
                            <td>No</td>
                            <td>Database user password.</td>
                        </tr>
                    </tbody>
                </table>
            </para>
			<para>
				<table frame="void">
					<caption>cdbgen optional parameters</caption>
					<col width="14%"/>
					<col width="7%"/>
					<col width="79%"/>
					<thead>
						<tr>
							<th>Name</th>
							<th>Type</th>
							<th>Description</th>
						</tr>
					</thead>
					<tbody>
						<tr>
							<td><code>adapter</code>
							</td>
							<td>String</td>
							<td>Java class name implementing org.apache.cayenne.dba.DbAdapter. While
								this attribute is optional (a generic JdbcAdapter is used if not
								set), it is highly recommended to specify correct target
								adapter.</td>
						</tr>
						<tr>
							<td><code>createFK</code></td>
							<td>boolean</td>
							<td>Indicates whether cdbgen should create foreign key constraints. Default is "true".</td>
						</tr>
						<tr>
							<td><code>createPK</code></td>
							<td>boolean</td>
							<td>Indicates whether cdbgen should create Cayenne-specific auto PK objects. Default is
								"true".</td>
						</tr>
						<tr>
							<td><code>createTables</code></td>
							<td>boolean</td>
							<td>Indicates whether cdbgen should create new tables. Default is "true".</td>
						</tr>
						<tr>
							<td><code>dropPK</code></td>
							<td>boolean</td>
							<td>Indicates whether cdbgen should drop Cayenne primary key support objects. Default is
								"false".</td>
						</tr>
						<tr>
							<td><code>dropTables</code></td>
							<td>boolean</td>
							<td>Indicates whether cdbgen should drop the tables before attempting to create new ones.
								Default is "false".</td>
						</tr>
						<tr>
							<td><code>password</code></td>
							<td>String</td>
							<td>Database user password.</td>
						</tr>
						<tr>
							<td><code>username</code></td>
							<td>String</td>
							<td>Database user name.</td>
						</tr>
					</tbody>
				</table>
			</para>
			<para>Example - creating a DB schema on a local HSQLDB
				database:<programlisting language="xml">&lt;plugin>
    &lt;groupId>org.apache.cayenne.plugins&lt;/groupId>
    &lt;artifactId>cayenne-maven-plugin&lt;/artifactId>
    &lt;version><?eval ${project.version}?>&lt;/version>
    &lt;executions>
        &lt;execution>
            &lt;configuration>
                &lt;map>${project.basedir}/src/main/resources/my.map.xml&lt;/map>
                &lt;adapter>org.apache.cayenne.dba.hsqldb.HSQLDBAdapter&lt;/adapter>
                &lt;dataSource>
                    &lt;url>jdbc:hsqldb:hsql://localhost/testdb&lt;/url>
                    &lt;driver>org.hsqldb.jdbcDriver&lt;/driver>
                    &lt;username>sa&lt;/username>
                &lt;/dataSource>
            &lt;/configuration>
            &lt;goals>
                &lt;goal>cdbgen&lt;/goal>
            &lt;/goals>
        &lt;/execution>
    &lt;/executions>
&lt;/plugin></programlisting></para>
		</section>
		<section xml:id="mvn-cdbimport">
			<title>cdbimport</title>
			<para><code>cdbimport</code> is a <code>cayenne-maven-plugin</code> goal that generates a DataMap
				based on an existing database schema. By default, it is bound to the
				generate-sources phase. This allows you to generate your DataMap prior to building
				your project, possibly followed by "cgen" execution to generate the classes.
				CDBImport plugin described in details in chapter <link linkend="re-introduction">"DB-First Flow"</link>
				<table frame="void">
					<caption>cdbimport parameters</caption>
					<col width="14%"/>
					<col width="7%"/>
                    <col width="7%"/>
					<col width="72%"/>
					<thead>
						<tr>
							<th>Name</th>
							<th>Type</th>
                            <th>Required</th>
							<th>Description</th>
						</tr>
					</thead>
					<tbody>
						<tr>
							<td><code>map</code>
							</td>
							<td>File</td>
                            <td>Yes</td>
							<td>DataMap XML file which is the destination of the schema import. Can
								be an existing file. If this file does not exist, it is created when
								cdbimport is executed. E.g.
									<code>${project.basedir}/src/main/resources/my.map.xml</code>.
								If "overwrite" is true (the default), an existing DataMap will be
								used as a template for the new imported DataMap, i.e. all its
								entities will be cleared and recreated, but its common settings,
								such as default Java package, will be preserved (unless changed
								explicitly in the plugin configuration).</td>
						</tr>
                        <tr>
                            <td><code>adapter</code>
                            </td>
                            <td>String</td>
                            <td>No</td>
                            <td>A Java class name implementing org.apache.cayenne.dba.DbAdapter. This attribute is
                                optional. If not specified, AutoAdapter is used, which will attempt
                                to guess the DB type.</td>
                        </tr>
                        <tr>
                            <td><code>dataSource</code>
                            </td>
                            <td>XML</td>
                            <td>Yes</td>
                            <td>An object that contains Data Source parameters</td>
                        </tr>
                        <tr>
                            <td><code>dbimport</code>
                            </td>
                            <td>XML</td>
                            <td>No</td>
                            <td>An object that contains detailed reverse engineering rules about what DB objects should
                                be processed. For full information about this parameter see <link
                                        linkend="re-introduction">"DB-First Flow"</link> chapter.</td>
                        </tr>
					</tbody>
				</table>
            </para>
            <para>
                <table frame="void">
                    <caption>&lt;dataSource> parameters</caption>
                    <col width="14%"/>
                    <col width="7%"/>
                    <col width="7%"/>
                    <col width="72%"/>
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Type</th>
                            <th>Required</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td><code>driver</code></td>
                            <td>String</td>
                            <td>Yes</td>
                            <td>A class of JDBC driver to use for the target database.</td>
                        </tr>
                        <tr>
                            <td><code>url</code></td>
                            <td>String</td>
                            <td>Yes</td>
                            <td>JDBC URL of a target database.</td>
                        </tr>
                        <tr>
                            <td><code>username</code></td>
                            <td>String</td>
                            <td>No</td>
                            <td>Database user name.</td>
                        </tr>
                        <tr>
                            <td><code>password</code></td>
                            <td>String</td>
                            <td>No</td>
                            <td>Database user password.</td>
                        </tr>
                    </tbody>
                </table>
            </para>
			<para>
				<table frame="void">
					<caption>&lt;dbimport> parameters</caption>
					<col width="14%"/>
					<col width="7%"/>
					<col width="79%"/>
					<thead>
						<tr>
							<th>Name</th>
							<th>Type</th>
							<th>Description</th>
						</tr>
					</thead>
					<tbody>
						<tr>
							<td><code>defaultPackage</code></td>
							<td>String</td>
							<td>A Java package that will be set as the imported DataMap default and
								a package of all the persistent Java classes. This is a required
								attribute if the "map" itself does not already contain a default
								package, as otherwise all the persistent classes will be mapped with
								no package, and will not compile.</td>
						</tr>
						<tr>
							<td><code>forceDataMapCatalog</code></td>
							<td>boolean</td>
							<td> Automatically tagging each DbEntity with the actual DB catalog/schema (default behavior)
                                may sometimes be undesirable. If this is the case then setting
                                    <code>forceDataMapCatalog</code> to <code>true</code> will set
                                DbEntity catalog to one in the DataMap. Default value is
                                    <code>false</code>. </td>
						</tr>
						<tr>
							<td><code>forceDataMapSchema</code></td>
							<td>boolean</td>
							<td> Automatically tagging each DbEntity with the actual DB catalog/schema (default behavior)
                                may sometimes be undesirable. If this is the case then setting
                                    <code>forceDataMapSchema</code> to <code>true</code> will set
                                DbEntity schema to one in the DataMap. Default value is
                                    <code>false</code>. </td>
						</tr>
						<tr>
							<td><code>meaningfulPkTables</code></td>
							<td>String</td>
							<td>A comma-separated list of Perl5 patterns that defines which imported tables should have
								their primary key columns mapped as ObjAttributes. "*" would
								indicate all tables.</td>
						</tr>
						<tr>
							<td><code>namingStrategy</code></td>
							<td>String</td>
							<td>
								The naming strategy used for mapping database names to object entity
								names. Default is <code>org.apache.cayenne.dbsync.naming.DefaultObjectNameGenerator</code>.
							</td>
						</tr>
                        <tr>
                            <td><code>skipPrimaryKeyLoading</code></td>
                            <td>boolean</td>
                            <td>Whether to load primary keys. Default "false".</td>
                        </tr>
                        <tr>
                            <td><code>skipRelationshipsLoading</code></td>
                            <td>boolean</td>
                            <td>Whether to load relationships. Default "false".</td>
                        </tr>
                        <tr>
                            <td><code>stripFromTableNames</code></td>
                            <td>String</td>
                            <td>Regex that matches the part of the table name that needs to be stripped off when
                                generating ObjEntity name. Here are some examples: <programlisting language="xml"><![CDATA[<!-- Strip prefix -->
<stripFromTableNames>^myt_</stripFromTableNames>

<!-- Strip suffix -->
<stripFromTableNames>_s$</stripFromTableNames>

<!-- Strip multiple occurrences in the middle -->
<stripFromTableNames>_abc</stripFromTableNames>]]></programlisting>
                            </td>
                        </tr>
                        <tr>
                            <td><code>usePrimitives</code></td>
                            <td>boolean</td>
                            <td>Whether numeric and boolean data types should be mapped as Java primitives or Java
                                classes. Default is "true", i.e. primitives will be used.</td>
                        </tr>
                        <tr>
                            <td><code>useJava7Types</code></td>
                            <td>boolean</td>
                            <td>Whether <code>DATE</code>, <code>TIME</code> and <code>TIMESTAMP</code> data types should be mapped
                                as <code>java.util.Date</code> or <code>java.time.*</code> classes.
                                Default is "false", i.e. <code>java.time.*</code> will be used.</td>
                        </tr>
						<tr xml:id="cdbimport-rr-parameter">
							<td>filters configuration</td>
							<td>XML</td>
							<td>Detailed reverse engineering rules about what DB objects should be processed.
                                For full information about this parameter see <link linkend="re-introduction">"DB-First Flow"</link> chapter.
                                Here is some simple example:
                                <programlisting language="xml">&lt;dbimport&gt;
	&lt;catalog name="test_catalog"&gt;
		&lt;schema name="test_schema"&gt;
			&lt;includeTable>.*&lt;/includeTable>
			&lt;excludeTable>test_table&lt;/excludeTable>
		&lt;/schema&gt;
	&lt;/catalog&gt;

	&lt;includeProcedure pattern=".*"/&gt;
&lt;/dbimport&gt;</programlisting>
                            </td>
						</tr>
					</tbody>
				</table>
			</para>
			<para>Example - loading a DB schema from a local HSQLDB database (essentially a reverse operation
                compared to the <code>cdbgen</code> example above)
				:<programlisting language="xml">&lt;plugin>
    &lt;groupId>org.apache.cayenne.plugins&lt;/groupId>
    &lt;artifactId>cayenne-maven-plugin&lt;/artifactId>
    &lt;version><?eval ${project.version}?>&lt;/version>

    &lt;executions>
        &lt;execution>
            &lt;configuration>
                &lt;map>${project.basedir}/src/main/resources/my.map.xml&lt;/map>
                &lt;dataSource>
                    &lt;url>jdbc:mysql://127.0.0.1/mydb&lt;/url>
                    &lt;driver>com.mysql.jdbc.Driver&lt;/driver>
                    &lt;username>sa&lt;/username>
                &lt;/dataSource>
                &lt;dbimport>
                    &lt;defaultPackage>com.example.cayenne&lt;/defaultPackage>
                &lt;/dbimport>
            &lt;/configuration>
            &lt;goals>
                &lt;goal>cdbimport&lt;/goal>
            &lt;/goals>
        &lt;/execution>
    &lt;/executions>
&lt;/plugin></programlisting></para>
        </section>
    </section>
    <section xml:id="ant-projects">
        <title>Ant Projects</title>
        <section xml:id="ant-cgen">
            <title>cgen</title>
        </section>
        <section xml:id="ant-cdbgen">
            <title>cdbgen</title>
        </section>
        <section xml:id="ant-cdbimport">
            <title>cdbimport</title>
            <para>This is an Ant counterpart of "cdbimport" goal of cayenne-maven-plugin described
                above. It has exactly the same properties. Here is a usage
                example:<programlisting language="xml"> &lt;cdbimport map="${context.dir}/WEB-INF/my.map.xml"
    driver="com.mysql.jdbc.Driver" 
    url="jdbc:mysql://127.0.0.1/mydb" 
    username="sa"
    defaultPackage="com.example.cayenne"/> </programlisting>
			</para>
		</section>
		<section xml:id="ant-cdataport">
			<title>cdataport</title>
			<para>
				<note>
					<para>'cdataport' is deprecated in 4.0 and will be removed in the future versions.</para>
				</note>
			</para>
		</section>
	</section>
</chapter>
