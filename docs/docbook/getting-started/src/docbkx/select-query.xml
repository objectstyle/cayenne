<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements. See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to you under the Apache License, Version
    2.0 (the "License"); you may not use this file except in compliance
    with the License. You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0 Unless required by
    applicable law or agreed to in writing, software distributed under the
    License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
    CONDITIONS OF ANY KIND, either express or implied. See the License for
    the specific language governing permissions and limitations under the
    License.
-->
<section xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
    <title>Selecting Objects</title>
    <para>This chapter shows how to select objects from the database using <code>ObjectSelect</code> query. </para>
    <section xml:id="introducing-select-query">
        <title>Introducing ObjectSelect</title>
        <para>It was shown before how to persist new objects. Cayenne queries are used to access
            already saved objects. The primary query type used for selecting objects is <code>ObjectSelect</code>.
            It can be mapped in CayenneModeler or created
            via the API. We'll use the latter approach in this section. We don't have too much data
            in the database yet, but we can still demonstrate the main principles below.</para>
        <itemizedlist>
            <listitem>
                <para>Select all paintings (the code, and the log output it generates):</para>
            </listitem>
        </itemizedlist>
        <programlisting language="java">List&lt;Painting> paintings1 =  ObjectSelect.query(Painting.class).select(context); </programlisting>
        <screen>INFO: SELECT t0.GALLERY_ID, t0.ARTIST_ID, t0.NAME, t0.ID FROM PAINTING t0
INFO: === returned 2 rows. - took 18 ms.</screen>
        <itemizedlist>
            <listitem>
                <para>Select paintings that start with "<code>gi</code>", ignoring case:</para>
            </listitem>
        </itemizedlist>
        <programlisting language="java">List&lt;Painting> paintings2 = ObjectSelect.query(Painting.class)
        .where(Painting.NAME.likeIgnoreCase("gi%")).select(context); </programlisting>
        <screen>INFO: SELECT t0.GALLERY_ID, t0.NAME, t0.ARTIST_ID, t0.ID FROM PAINTING t0 WHERE UPPER(t0.NAME) LIKE UPPER(?)
      [bind: 1->NAME:'gi%'] - prepared in 6 ms.
INFO: === returned 1 row. - took 18 ms.</screen>
        <itemizedlist>
            <listitem>
                <para>Select all paintings done by artists who were born more than a 100 years
                    ago:</para>
            </listitem>
        </itemizedlist>
        <programlisting language="java">List&lt;Painting> paintings3 = ObjectSelect.query(Painting.class)
        .where(Painting.ARTIST.dot(Artist.DATE_OF_BIRTH).lt(LocalDate.of(1900,1,1)))
        .select(context); </programlisting>
        <screen>INFO: SELECT t0.GALLERY_ID, t0.NAME, t0.ARTIST_ID, t0.ID FROM PAINTING t0 JOIN ARTIST t1 ON (t0.ARTIST_ID = t1.ID)
      WHERE t1.DATE_OF_BIRTH &lt; ? [bind: 1->DATE_OF_BIRTH:'1911-01-01 00:00:00.493'] - prepared in 7 ms.
INFO: === returned 2 rows. - took 25 ms.</screen>
    </section>
</section>
