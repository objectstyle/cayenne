<?xml version="1.0" encoding="UTF-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements. See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to you under the Apache License, Version
    2.0 (the "License"); you may not use this file except in compliance
    with the License. You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0 Unless required by
    applicable law or agreed to in writing, software distributed under the
    License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
    CONDITIONS OF ANY KIND, either express or implied. See the License for
    the specific language governing permissions and limitations under the
    License.
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    version="5.0" xml:id="queries">
    <title>Queries</title>
    <para>Queries are Java objects used by the application to communicate with the database. Cayenne
        knows how to translate queries into SQL statements appropriate for a particular database
        engine. Most often queries are used to find objects matching certain criteria, but there are
        other types of queries too. E.g. those allowing to run native SQL, call DB stored
        procedures, etc. When committing objects, Cayenne itself creates special queries to
        insert/update/delete rows in the database. </para>
    <para>There is a number of built-in queries in Cayenne, described later in this chapter. Most of
        the newer queries use fluent API and can be created and executed as easy-to-read one-liners.
        Users can define their own query types to abstract certain DB interactions that for whatever
        reason can not be adequately described by the built-in set.</para>
    <para>Queries can be roughly categorized as "object" and "native". Object queries (most notably
        ObjectSelect, SelectById, and EJBQLQuery) are built with abstractions originating in the
        object model (the "object" side in the "object-relational" divide). E.g. ObjectSelect is
        assembled from a Java class of the objects to fetch, a qualifier expression, orderings, etc.
        - all of this expressed in terms of the object model.</para>
    <para>Native queries describe a desired DB operation as SQL code (SQLSelect, SQLTemplate query)
        or a reference to a stored procedure (ProcedureQuery), etc. The results of native queries
        are usually presented as Lists of Maps, with each map representing a row in the DB (a term
        "data row" is often used to describe such a map). They can potentially be converted to
        objects, however it may take a considerable effort to do so. Native queries are also less
        (if at all) portable across databases than object queries. </para>

    <xi:include href="queries-select.xml"/>
    <xi:include href="queries-ejbql.xml"/>
    <xi:include href="queries-selectbyid.xml"/>
    <xi:include href="queries-sqlselect.xml"/>
    <xi:include href="queries-mapped.xml"/>
    <xi:include href="queries-procedurecall.xml"/>
    <xi:include href="queries-custom.xml"/>
    <xi:include href="queries-sqltemplate.xml"/>

    <!-- ProcedureQuery is not deprecated as of 4.0 but newer ProcedureCall is preferred -->
    <!--<xi:include href="queries-procedure.xml"/>-->
    <!-- NamedQuery deprecated since 4.0 -->
    <!--<xi:include href="queries-namedquery.xml"/>-->
</chapter>
